/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package coze

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	ragModel "github.com/coze-dev/coze-studio/backend/api/model/data/knowledge/rag"
	"github.com/coze-dev/coze-studio/backend/application/knowledge"
)

// RagSearch RAG搜索
// @router /api/knowledge/rag/search [POST]
func RagSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RagSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RagSearch(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeepSearch 深度搜索
// @router /api/knowledge/rag/search/deep [POST]
func DeepSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeepSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.DeepSearch(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateRagDataset 创建RAG数据集
// @router /api/knowledge/rag/dataset/create [POST]
func CreateRagDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagDataset(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// 删除 SyncDatasetToRag - Coze直接通过知识库ID调用RAG，不需要数据同步

// CreateRagCollection 创建RAG集合
// @router /api/knowledge/rag/collection/create [POST]
func CreateRagCollection(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// StartRagTraining 启动RAG训练
// @router /api/knowledge/rag/training/start [POST]
func StartRagTraining(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.StartRagTrainingRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.StartRagTraining(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagTrainingStatus 获取RAG训练状态
// @router /api/knowledge/rag/training/status [GET]
func GetRagTrainingStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagTrainingStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagTrainingStatus(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagHealth 获取RAG服务健康状态
// @router /api/knowledge/rag/health [GET]
func GetRagHealth(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagHealthRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagHealth(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagUsageStats 获取RAG使用统计
// @router /api/knowledge/rag/usage [GET]
func GetRagUsageStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagUsageStatsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagUsageStats(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 知识库基础管理接口 ==========

// GetKnowledgeBases 获取知识库列表 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset [GET]
func GetKnowledgeBases(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetKnowledgeBasesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetKnowledgeBases(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateKnowledgeBase 创建知识库 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset [POST]
func CreateKnowledgeBase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateKnowledgeBaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 检查RAGApp是否已初始化
	if knowledge.RAGApp == nil {
		internalServerErrorResponse(ctx, c, fmt.Errorf("RAG service is not available"))
		return
	}

	resp, err := knowledge.RAGApp.CreateKnowledgeBase(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetKnowledgeBaseById 获取知识库详情 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/:id [GET]
func GetKnowledgeBaseById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetKnowledgeBaseByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Validate dataset ID - check for undefined or invalid values
	datasetId := c.Param("id")
	if datasetId == "" || datasetId == "undefined" || datasetId == "null" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Invalid dataset ID: dataset ID cannot be undefined, null or empty",
			"data":    nil,
		})
		return
	}

	// Set the validated ID in the request
	req.Id = datasetId

	resp, err := knowledge.RAGApp.GetKnowledgeBaseById(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateKnowledgeBase 更新知识库 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/:id [PUT]
func UpdateKnowledgeBase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.UpdateKnowledgeBaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.UpdateKnowledgeBase(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteKnowledgeBase 删除知识库 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/:id [DELETE]
func DeleteKnowledgeBase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeleteKnowledgeBaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Validate dataset ID - check for undefined or invalid values
	datasetId := c.Param("id")
	if datasetId == "" || datasetId == "undefined" || datasetId == "null" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Invalid dataset ID: dataset ID cannot be undefined, null or empty",
			"data":    nil,
		})
		return
	}

	// Set the validated ID in the request
	req.Id = datasetId

	resp, err := knowledge.RAGApp.DeleteKnowledgeBase(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// SearchTestKnowledgeBase 知识库搜索测试 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/searchTest [POST]
func SearchTestKnowledgeBase(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.SearchTestKnowledgeBaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Enhanced validation for search test
	if req.DatasetId == "" || req.DatasetId == "undefined" || req.DatasetId == "null" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "datasetId and text are required",
			"data":    nil,
		})
		return
	}

	if req.Text == "" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "datasetId and text are required",
			"data":    nil,
		})
		return
	}

	resp, err := knowledge.RAGApp.SearchTestKnowledgeBase(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== FastGPT标准集合管理接口 ==========

// CreateCollectionFastGPT 创建集合 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection [POST]
func CreateCollectionFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// Enhanced validation for collection creation
	if req.Name == "" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Collection name is required",
			"data":    nil,
		})
		return
	}

	if req.DatasetId == "" || req.DatasetId == "undefined" || req.DatasetId == "null" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Collection name and datasetId are required",
			"data":    nil,
		})
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetCollectionsFastGPT 获取集合列表 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection [GET]
func GetCollectionsFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagCollectionsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagCollections(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetCollectionByIdFastGPT 获取集合详情 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection/:id [GET]
func GetCollectionByIdFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagCollectionByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagCollectionById(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateCollectionFastGPT 更新集合 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection/:id [PUT]
func UpdateCollectionFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.UpdateRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.UpdateRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteCollectionFastGPT 删除集合 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection/:id [DELETE]
func DeleteCollectionFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeleteRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.DeleteRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// SyncCollectionFastGPT 同步集合 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection/:id/sync [POST]
func SyncCollectionFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.SyncRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.SyncRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RetrainCollectionFastGPT 重训练集合 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/collection/:id/retrain [POST]
func RetrainCollectionFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RetrainRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RetrainRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== FastGPT标准数据管理接口 ==========

// InsertDataFastGPT 插入数据 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/data [POST]
func InsertDataFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.InsertRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.InsertRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// PushDataFastGPT 批量推送数据 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/data/push [POST]
func PushDataFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.PushRagDataBatchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.PushRagDataBatch(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetDataListFastGPT 获取数据列表 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/data [GET]
func GetDataListFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagDataListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagDataList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetDataByIdFastGPT 获取数据详情 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/data/:id [GET]
func GetDataByIdFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagDataByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagDataById(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateDataFastGPT 更新数据 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/data/:id [PUT]
func UpdateDataFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.UpdateRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.UpdateRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteDataFastGPT 删除数据 (FastGPT标准)
// @router /api/knowledge/rag/core/dataset/data/:id [DELETE]
func DeleteDataFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeleteRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.DeleteRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 数据集管理接口 ==========

// GetRagDatasets 获取RAG数据集列表
// @router /api/knowledge/rag/dataset/list [GET]
func GetRagDatasets(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagDatasetsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagDatasets(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagDatasetById 获取RAG数据集详情
// @router /api/knowledge/rag/dataset/:id [GET]
func GetRagDatasetById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagDatasetByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagDatasetById(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateRagDataset 更新RAG数据集
// @router /api/knowledge/rag/dataset/:id [PUT]
func UpdateRagDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.UpdateRagDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.UpdateRagDataset(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteRagDataset 删除RAG数据集
// @router /api/knowledge/rag/dataset/:id [DELETE]
func DeleteRagDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeleteRagDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.DeleteRagDataset(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RetrainRagDataset 重训练RAG数据集
// @router /api/knowledge/rag/dataset/retrain [POST]
func RetrainRagDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RetrainRagDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RetrainRagDataset(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 集合管理接口 ==========

// GetRagCollections 获取RAG集合列表
// @router /api/knowledge/rag/collection/list [GET]
func GetRagCollections(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagCollectionsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagCollections(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagCollectionById 获取RAG集合详情
// @router /api/knowledge/rag/collection/:id [GET]
func GetRagCollectionById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagCollectionByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagCollectionById(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateRagCollection 更新RAG集合
// @router /api/knowledge/rag/collection/:id [PUT]
func UpdateRagCollection(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.UpdateRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.UpdateRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteRagCollection 删除RAG集合
// @router /api/knowledge/rag/collection/:id [DELETE]
func DeleteRagCollection(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeleteRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.DeleteRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// SyncRagCollection 同步RAG集合
// @router /api/knowledge/rag/collection/:id/sync [POST]
func SyncRagCollection(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.SyncRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.SyncRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RetrainRagCollection 重训练RAG集合
// @router /api/knowledge/rag/collection/:id/retrain [POST]
func RetrainRagCollection(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RetrainRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RetrainRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagCollectionTrainingDetail 获取RAG集合训练详情
// @router /api/knowledge/rag/collection/:id/training [GET]
func GetRagCollectionTrainingDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagCollectionTrainingDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagCollectionTrainingDetail(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ExportRagCollection 导出RAG集合
// @router /api/knowledge/rag/collection/:id/export [GET]
func ExportRagCollection(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.ExportRagCollectionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.ExportRagCollection(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 数据管理接口 ==========

// InsertRagData 插入单条RAG数据
// @router /api/knowledge/rag/data [POST]
func InsertRagData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.InsertRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.InsertRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// PushRagDataBatch 批量推送RAG数据
// @router /api/knowledge/rag/data/push [POST]
func PushRagDataBatch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.PushRagDataBatchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.PushRagDataBatch(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagDataList 获取RAG数据列表
// @router /api/knowledge/rag/data/list [GET]
func GetRagDataList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagDataListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagDataList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagDataById 获取RAG数据详情
// @router /api/knowledge/rag/data/:id [GET]
func GetRagDataById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagDataByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagDataById(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateRagData 更新RAG数据
// @router /api/knowledge/rag/data/:id [PUT]
func UpdateRagData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.UpdateRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.UpdateRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteRagData 删除RAG数据
// @router /api/knowledge/rag/data/:id [DELETE]
func DeleteRagData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.DeleteRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.DeleteRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 文件处理接口 ==========

// CreateRagCollectionFromFile 从文件创建RAG集合
// @router /api/knowledge/rag/collection/create/file [POST]
func CreateRagCollectionFromFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromFile(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateRagCollectionFromLink 从链接创建RAG集合
// @router /api/knowledge/rag/collection/create/link [POST]
func CreateRagCollectionFromLink(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromLinkRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromLink(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateRagCollectionFromText 从文本创建RAG集合
// @router /api/knowledge/rag/collection/create/text [POST]
func CreateRagCollectionFromText(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromTextRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromText(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UploadRagFile 上传RAG文件并创建集合
// @router /api/knowledge/rag/file/upload [POST]
func UploadRagFile(ctx context.Context, c *app.RequestContext) {
	// 处理multipart文件上传
	fileHeader, err := c.FormFile("file")
	if err != nil || fileHeader == nil {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Failed to get file from form data: " + err.Error(),
			"data":    nil,
		})
		return
	}

	// 打开文件
	file, err := fileHeader.Open()
	if err != nil {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Failed to open file: " + err.Error(),
			"data":    nil,
		})
		return
	}
	defer file.Close()

	// 读取文件内容
	fileContent := make([]byte, fileHeader.Size)
	_, err = file.Read(fileContent)
	if err != nil {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "Failed to read file content: " + err.Error(),
			"data":    nil,
		})
		return
	}

	// 获取表单参数
	datasetId := c.PostForm("datasetId")
	name := c.PostForm("name")
	if name == "" {
		name = fileHeader.Filename // 如果没有提供名称，使用文件名
	}

	// 验证必需参数
	if datasetId == "" {
		c.JSON(consts.StatusBadRequest, map[string]interface{}{
			"code":    400,
			"message": "datasetId is required",
			"data":    nil,
		})
		return
	}

	// 构建从文件创建集合的请求
	req := ragModel.CreateRagCollectionFromFileRequest{
		DatasetId:    datasetId,
		Name:         name,
		FileData:     fileContent,
		FileName:     fileHeader.Filename,
		FileType:     "auto", // 自动检测文件类型
		TrainingType: "chunk",
		ChunkSize:    512,
		ChunkOverlap: 50,
	}

	// 调用应用服务创建集合
	resp, err := knowledge.RAGApp.CreateRagCollectionFromFile(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	
	// 返回兼容的响应格式
	c.JSON(consts.StatusOK, map[string]interface{}{
		"code":    200,
		"message": "File uploaded and collection created successfully",
		"data": map[string]interface{}{
			"fileId":      resp.CollectionId, // 使用集合ID作为文件ID
			"fileUrl":     "",                // FastGPT不返回文件URL
			"collectionId": resp.CollectionId,
			"trainingJobId": resp.TrainingJobId,
		},
	})
}

// ProcessRagFile 处理RAG文件
// @router /api/knowledge/rag/file/process [POST]
func ProcessRagFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.FileProcessRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.ProcessRagFile(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetSupportedFileTypes 获取支持的文件类型
// @router /api/knowledge/rag/file/types [GET]
func GetSupportedFileTypes(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetSupportedFileTypesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetSupportedFileTypes(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ValidateRagFile 验证RAG文件
// @router /api/knowledge/rag/file/validate [POST]
func ValidateRagFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.FileValidationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.ValidateRagFile(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetFileProcessingStatus 获取文件处理状态
// @router /api/knowledge/rag/file/status [GET]
func GetFileProcessingStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetFileProcessingStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetFileProcessingStatus(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 高级搜索接口 ==========

// RagSearchTest 搜索测试
// @router /api/knowledge/rag/search/test [POST]
func RagSearchTest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RagSearchTestRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RagSearchTest(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RagAdvancedSearch 高级搜索
// @router /api/knowledge/rag/search/advanced [POST]
func RagAdvancedSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RagAdvancedSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RagAdvancedSearch(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RagHybridSearch 混合搜索
// @router /api/knowledge/rag/search/hybrid [POST]
func RagHybridSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RagHybridSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RagHybridSearch(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RagSearchWithRerank 重排序搜索
// @router /api/knowledge/rag/search/rerank [POST]
func RagSearchWithRerank(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.RagSearchWithRerankRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.RagSearchWithRerank(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 增强监控接口 ==========

// GetRagMetrics 获取RAG系统指标
// @router /api/knowledge/rag/metrics [GET]
func GetRagMetrics(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagMetricsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagMetrics(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagAuditLogs 获取RAG审计日志
// @router /api/knowledge/rag/audit [GET]
func GetRagAuditLogs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagAuditLogsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagAuditLogs(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ExportRagData 导出RAG数据
// @router /api/knowledge/rag/export [GET]
func ExportRagData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.ExportRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.ExportRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRagPerformanceStats 获取RAG性能统计
// @router /api/knowledge/rag/performance [GET]
func GetRagPerformanceStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.GetRagPerformanceStatsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.GetRagPerformanceStats(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 批量操作接口 ==========

// BatchCreateRagCollections 批量创建RAG集合
// @router /api/knowledge/rag/collection/batch/create [POST]
func BatchCreateRagCollections(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.BatchCreateRagCollectionsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.BatchCreateRagCollections(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// BatchDeleteRagCollections 批量删除RAG集合
// @router /api/knowledge/rag/collection/batch/delete [POST]
func BatchDeleteRagCollections(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.BatchDeleteRagCollectionsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.BatchDeleteRagCollections(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// BatchUpdateRagData 批量更新RAG数据
// @router /api/knowledge/rag/data/batch/update [POST]
func BatchUpdateRagData(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.BatchUpdateRagDataRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.BatchUpdateRagData(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// BatchRetrainCollections 批量重训练集合
// @router /api/knowledge/rag/collection/batch/retrain [POST]
func BatchRetrainCollections(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.BatchRetrainCollectionsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.BatchRetrainCollections(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ========== 文件上传处理函数 ==========

// CreateCollectionFromFileUpload 从文件上传创建集合 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/collection/create/file [POST]
func CreateCollectionFromFileUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromFile(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateCollectionFromLocalFile 从本地文件创建集合 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/collection/create/localFile [POST]
func CreateCollectionFromLocalFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromFile(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateCollectionFromLinkFastGPT 从链接创建集合 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/collection/create/link [POST]
func CreateCollectionFromLinkFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromLinkRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromLink(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// CreateCollectionFromTextFastGPT 从文本创建集合 (FastGPT兼容)
// @router /api/knowledge/rag/core/dataset/collection/create/text [POST]
func CreateCollectionFromTextFastGPT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ragModel.CreateRagCollectionFromTextRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := knowledge.RAGApp.CreateRagCollectionFromText(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// 删除重复的函数定义 - 这些函数已在前面定义过